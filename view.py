from sqlalchemy import select, delete, ScalarResult
from sqlalchemy.orm import Session
from datetime import datetime
from models import Vacancy, Category


class CategoryView():
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""

    def __init__(self, session: Session) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞. –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏—é"""
        self._session = session

    async def get_all_category(self) -> ScalarResult:
        """–ú–µ—Ç–æ–¥ –≤—ã–≥—Ä—É–∂–∞—é—â–∏–π –∏–∑ –ë–î –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π
        –∏—Ö –≤ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞"""

        command = select(Category)
        return self._session.scalars(command)
    
    async def set_category(self, message: str) -> str:
        """–ú–µ—Ç–æ–¥ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤–∞–∫–∞–Ω—Å–∏–π"""
        message = message.strip()
        cat_words = message.lower().split()
        if all([word.isalpha() for word in cat_words]):
            self._session.add(
                Category(name=cat_words)
            )
            self._session.commit()
            return f"–ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{message}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞"
        else:
            return "–û—à–∏–±–∫–∞: –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –º–æ–≥—É—Ç —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –±—É–∫–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞"

    async def delete_category_by_id(self, id: int) -> None:
        """–ú–µ—Ç–æ–¥ —É–¥–∞–ª—è—é—â–∏–π –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ –ë–î"""
        command = delete(Category).where(Category.id == id)
        self._session.execute(command)
        self._session.commit()


class VacancyView():
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≤–∞–∫–∞–Ω—Å–∏—è–º–∏"""

    def __init__(self, session: Session) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞. –ü—Ä–∏–Ω–∏–º–∞–µ–º –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏—é"""
        self._session = session

    def _get_all_vacancy(self, id: int) -> ScalarResult:
        """–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–∞—é—â–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏"""
        command = select(Vacancy).where(
            Vacancy.category.any(Category.id==id)
        ).order_by(
            Vacancy.published_at
        )
        return self._session.scalars(command)

    def _view_vacancy(self, vacancy: ScalarResult) -> str:
        """–ú–µ—Ç–æ–¥ —Ñ–æ—Ä–º–∏—Ä—É—é—â–∞—è —Å—Ç—Ä–æ–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
        –∫–æ—Ç–æ—Ä–æ–µ –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—Å—è –≤ —á–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        message = []
        for i in vacancy:
            vac_str = "{0}\nüè¢ {1}\n{2}\nüí∏ {3}\nüöá {4}\nüìÖ {5}\nüñ•Ô∏è {6}".format(
                i.name,
                i.employer,
                i.experience,
                i.salary,
                i.metro_station,
                i.published_at,
                i.url
            )
            message.append(vac_str)
        return "\n\n".join(message)

    async def get_category_vacancy(self, id: int) -> str:
        """–ú–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∏–π –≤–∞–∫–∞–Ω—Å–∏–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        vacancy = self._get_all_vacancy(id)
        message = self._view_vacancy(vacancy)
        return message
    
    async def get_today_vacancy_by_id(self, id: int) -> str:
        """–ú–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–π –∑–∞–¥–∞–Ω–Ω–æ–π 
        –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å–µ–≥–æ–¥–Ω—è"""
        today = datetime.today().date()
        command = select(Vacancy).where(
            Vacancy.category.any(Category.id==id)
        ).where(
            Vacancy.published_at == today
        )
        vacancy = self._session.scalars(command)
        message = self._view_vacancy(vacancy)
        return message
